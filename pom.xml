<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<version>30.0.0</version>
		<groupId>org.scijava</groupId>
		<artifactId>pom-scijava</artifactId>
	</parent>

	<groupId>org.janelia.saalfeldlab</groupId>
	<artifactId>paintera</artifactId>
	<version>0.32.3-SNAPSHOT</version>

	<name>Paintera</name>
	<description>New Era Painting and annotation tool</description>
	<url>https://github.com/saalfeldlab/paintera</url>
	<inceptionYear>2018</inceptionYear>
	<organization>
		<name>HHMI Janelia</name>
		<url>https://janelia.org</url>
	</organization>
	<licenses>
		<license>
			<name>GNU General Public License v2.0</name>
		</license>
	</licenses>

	<properties>
		<!-- allows passing in command line argument to javafx:run via `-Dpaintera.commandline.args="....."`-->
		<paintera.commandline.args />
		<scijava.jvm.build.version>11</scijava.jvm.build.version>
		<scijava.jvm.version>11</scijava.jvm.version>

		<main-class>org.janelia.saalfeldlab.paintera.Paintera</main-class>
		<license.licenseName>GNU General Public License v2.0</license.licenseName>
		<license.copyrightOwners>Philipp Hanslovsky, Stephan Saalfeld</license.copyrightOwners>

		<!-- NB: Deploy releases to the SciJava Maven repository. -->
		<releaseProfiles>sign,deploy-to-scijava</releaseProfiles>

		<imglib2-cache.version>1.0.0-beta-16</imglib2-cache.version>
		<bigdataviewer-vistools.version>1.0.0-beta-28</bigdataviewer-vistools.version>
		<picocli.version>4.0.1</picocli.version>
		<groovy.version>2.5.14</groovy.version>

		<kotlin.compiler.jvmTarget>11</kotlin.compiler.jvmTarget>
		<kotlin.version>1.6.0</kotlin.version>

		<package-name>org.janelia.saalfeldlab.paintera</package-name>

		<!-- kotlin incremental compilation. -->
		<kotlin.compiler.incremental>true</kotlin.compiler.incremental>

		<!-- NB: Convert README.md to html during compilation. -->
		<markdown-page-generator-plugin.version>2.1.0</markdown-page-generator-plugin.version>

		<!-- NB: TODO JavaDoc generation is not supported for kotlin code. Look into something like Dokka perhaps-->
		<javadoc.skip>true</javadoc.skip>
		<maven.javadoc.skip>${javadoc.skip}</maven.javadoc.skip>

		<saalfx.version>0.5.1</saalfx.version>

		<!--		has to be version 2.6.1 with logback-1.2.3. If parent pom-scijava updates logback version, this
								probably has to be udpated as well. -->
		<janino.version>3.0.7</janino.version>
		<logback.version>1.4.0</logback.version>
		<slf4j.version>2.0.0</slf4j.version>

		<!-- JavaFx Version-->
		<javafx.version>18.0.1</javafx.version>

		<n5.version>2.5.0</n5.version>
		<n5-hdf5.version>1.3.0</n5-hdf5.version>
		<n5-google-cloud.version>3.3.2</n5-google-cloud.version>
		<imglib2-algorithm.version>0.12.0</imglib2-algorithm.version>
		<n5-aws-s3.version>3.2.0</n5-aws-s3.version>
		<n5-zarr.version>0.0.6</n5-zarr.version>
		<alphanumeric-comparator.version>1.4.1</alphanumeric-comparator.version>
		<dokka.version>1.4.30</dokka.version>
		<jna.version>5.11.0</jna.version>
		<!--<enforcer.skip>true</enforcer.skip>-->
	</properties>


	<dependencies>

		<dependency>
			<groupId>org.janelia.saalfeldlab</groupId>
			<artifactId>n5-aws-s3</artifactId>
		</dependency>
		<dependency>
			<groupId>org.janelia.saalfeldlab</groupId>
			<artifactId>n5-zarr</artifactId>
		</dependency>
		<dependency>
			<groupId>org.janelia.saalfeldlab</groupId>
			<artifactId>n5</artifactId>
		</dependency>
		<dependency>
			<groupId>org.janelia.saalfeldlab</groupId>
			<artifactId>n5-hdf5</artifactId>
		</dependency>
		<dependency>
			<groupId>org.janelia.saalfeldlab</groupId>
			<artifactId>n5-imglib2</artifactId>
			<version>4.4.0</version>
		</dependency>

		<dependency>
			<groupId>org.janelia.saalfeldlab</groupId>
			<artifactId>n5-utils</artifactId>
			<version>0.0.5</version>
		</dependency>
		<dependency>
			<groupId>org.janelia.saalfeldlab</groupId>
			<artifactId>n5-google-cloud</artifactId>
		</dependency>

		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-base</artifactId>
			<version>${javafx.version}</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-controls</artifactId>
			<version>${javafx.version}</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-graphics</artifactId>
			<version>${javafx.version}</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-swing</artifactId>
			<version>${javafx.version}</version>
		</dependency>

		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-media</artifactId>
			<version>${javafx.version}</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-fxml</artifactId>
			<version>${javafx.version}</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-web</artifactId>
			<version>${javafx.version}</version>
		</dependency>


		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-stdlib</artifactId>
			<version>${kotlin.version}</version>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-common</artifactId>
		</dependency>
		<dependency>
			<groupId>sc.fiji</groupId>
			<artifactId>bigdataviewer-core</artifactId>
			<version>10.2.1</version>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
		</dependency>
		<dependency>
			<groupId>net.sf.trove4j</groupId>
			<artifactId>trove4j</artifactId>
		</dependency>
		<dependency>
			<groupId>net.imglib2</groupId>
			<artifactId>imglib2</artifactId>
			<version>6.0.0</version>
		</dependency>
		<dependency>
			<groupId>net.imglib2</groupId>
			<artifactId>imglib2-algorithm</artifactId>
		</dependency>
		<dependency>
			<groupId>net.imglib2</groupId>
			<artifactId>imglib2-ui</artifactId>
		</dependency>
		<dependency>
			<groupId>net.imglib2</groupId>
			<artifactId>imglib2-realtransform</artifactId>
			<version>3.1.2</version>
		</dependency>
		<dependency>
			<groupId>net.imglib2</groupId>
			<artifactId>imglib2-label-multisets</artifactId>
			<version>0.11.4</version>
		</dependency>
		<dependency>
			<groupId>sc.fiji</groupId>
			<artifactId>bigdataviewer-vistools</artifactId>
		</dependency>
		<dependency>
			<groupId>se.sawano.java</groupId>
			<artifactId>alphanumeric-comparator</artifactId>
			<version>${alphanumeric-comparator.version}</version>
		</dependency>

		<!--		logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-jdk-platform-logging</artifactId>
			<version>2.0.0</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
		</dependency>
		<!--		janino & commons-compiler is needed for conditionals inside logback xml -->
		<dependency>
			<groupId>org.codehaus.janino</groupId>
			<artifactId>janino</artifactId>
			<version>${janino.version}</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.janino</groupId>
			<artifactId>commons-compiler</artifactId>
			<version>${janino.version}</version>
		</dependency>

		<dependency>
			<groupId>net.imglib2</groupId>
			<artifactId>imglib2-cache</artifactId>
		</dependency>
		<dependency>
			<groupId>org.janelia.saalfeldlab</groupId>
			<artifactId>label-utilities</artifactId>
			<version>0.5.1</version>
		</dependency>
		<dependency>
			<groupId>org.janelia.saalfeldlab</groupId>
			<artifactId>label-utilities-n5</artifactId>
			<version>0.3.1</version>
		</dependency>
		<dependency>
			<groupId>org.controlsfx</groupId>
			<artifactId>controlsfx</artifactId>
			<version>11.1.0</version>
			<exclusions>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-base</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-graphics</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-controls</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-media</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-web</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.fxyz3d</groupId>
			<artifactId>fxyz3d</artifactId>
			<version>0.5.2</version>
			<!--		need to exclude slf4j-simple because of fxyz3d dependency -->
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-simple</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>info.picocli</groupId>
			<artifactId>picocli</artifactId>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
		</dependency>
		<dependency>
			<groupId>com.pivovarit</groupId>
			<artifactId>throwing-function</artifactId>
			<version>1.5.0</version>
		</dependency>
		<dependency>
			<groupId>org.snakeyaml</groupId>
			<artifactId>snakeyaml-engine</artifactId>
		</dependency>
		<dependency>
			<groupId>me.xdrop</groupId>
			<artifactId>fuzzywuzzy</artifactId>
			<version>1.2.0</version>
		</dependency>

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
		</dependency>

		<dependency>
			<groupId>io.reactivex.rxjava2</groupId>
			<artifactId>rxjavafx</artifactId>
			<version>2.2.2</version>
		</dependency>
		<dependency>
			<groupId>io.reactivex.rxjava2</groupId>
			<artifactId>rxjava</artifactId>
			<version>2.1.6</version>
		</dependency>

		<!--		scripting-->
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-repl-fx</artifactId>
			<version>0.2.0</version>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scripting-beanshell</artifactId>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scripting-groovy</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.codehaus.groovy</groupId>
					<artifactId>groovy</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy</artifactId>
			<version>${groovy.version}</version>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scripting-java</artifactId>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scripting-jython</artifactId>
			<exclusions>
				<exclusion>
					<groupId>com.github.jnr</groupId>
					<artifactId>jnr-ffi</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.github.jnr</groupId>
					<artifactId>jffi</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.github.jnr</groupId>
			<artifactId>jnr-ffi</artifactId>
			<version>2.2.10</version>
		</dependency>

		<!--		markdown rendering-->
		<dependency>
			<groupId>com.atlassian.commonmark</groupId>
			<artifactId>commonmark</artifactId>
			<version>0.13.0</version>
		</dependency>
		<dependency>
			<groupId>com.atlassian.commonmark</groupId>
			<artifactId>commonmark-ext-gfm-tables</artifactId>
			<version>0.13.0</version>
		</dependency>

		<dependency>
			<groupId>org.janelia.saalfeldlab</groupId>
			<artifactId>saalfx</artifactId>
			<version>${saalfx.version}</version>
		</dependency>

		<!--		Units and conversion-->
		<!-- https://mvnrepository.com/artifact/tech.units/indriya -->
		<dependency>
			<groupId>tech.units</groupId>
			<artifactId>indriya</artifactId>
			<version>2.0</version>
		</dependency>

		<!--		Load meshes-->
		<!--		https://github.com/javagl/Obj -->
		<dependency>
			<groupId>de.javagl</groupId>
			<artifactId>obj</artifactId>
			<version>0.3.0</version>
		</dependency>
		<!--		jsoup for html parsing inside CATMAID json mesh format-->
		<dependency>
			<groupId>org.jsoup</groupId>
			<artifactId>jsoup</artifactId>
			<version>1.15.3</version>
		</dependency>


		<!--	fontawesome-->
		<dependency>
			<groupId>de.jensd</groupId>
			<artifactId>fontawesomefx-commons</artifactId>
			<version>11.0</version>
			<exclusions>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-base</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-controls</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-graphics</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-fxml</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>de.jensd</groupId>
			<artifactId>fontawesomefx-controls</artifactId>
			<version>11.0</version>
			<exclusions>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-base</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-controls</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-graphics</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-fxml</artifactId>
				</exclusion>
				<exclusion>
					<groupId>de.jensd</groupId>
					<artifactId>fontawesomefx-commons</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>de.jensd</groupId>
			<artifactId>fontawesomefx-fontawesome</artifactId>
			<version>4.7.0-11</version>
			<exclusions>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-base</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-controls</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-graphics</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-fxml</artifactId>
				</exclusion>
				<exclusion>
					<groupId>de.jensd</groupId>
					<artifactId>fontawesomefx-commons</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!--		Tests-->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-test-junit</artifactId>
			<version>${kotlin.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testfx</groupId>
			<artifactId>testfx-junit</artifactId>
			<version>4.0.16-alpha</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testfx</groupId>
			<artifactId>openjfx-monocle</artifactId>
			<version>jdk-12.0.1+2</version>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-base</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-controls</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-graphics</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-fxml</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.controlsfx</groupId>
			<artifactId>fxsampler</artifactId>
			<version>1.0.11</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.fxmisc.richtext</groupId>
			<artifactId>richtextfx</artifactId>
			<version>0.10.6</version>
		</dependency>
		<dependency>
			<groupId>org.jetbrains.kotlinx</groupId>
			<artifactId>kotlinx-coroutines-core</artifactId>
			<version>${kotlin.version}</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>

	<developers>
		<developer>
			<id>hanslovsky</id>
			<name>Philipp Hanslovsky</name>
			<email>hanslovskyp@janelia.hhmi.org</email>
			<url />
			<organization>HHMI Janelia</organization>
			<organizationUrl>http://janelia.org/</organizationUrl>
			<roles>
				<role>founder</role>
				<role>lead</role>
				<role>developer</role>
				<role>maintainer</role>
			</roles>
			<timezone>-5</timezone>
		</developer>
		<developer>
			<id>axtimwalde</id>
			<name>Stephan Saalfeld</name>
			<email>saalfelds@janelia.hhmi.org</email>
			<url />
			<organization>HHMI Janelia</organization>
			<organizationUrl>http://janelia.org/</organizationUrl>
			<roles>
				<role>lead</role>
				<role>developer</role>
				<role>maintainer</role>
			</roles>
			<timezone>-5</timezone>
		</developer>
		<developer>
			<id>cmhulbert</id>
			<name>Caleb Hulbert</name>
			<email>hulbertc@hhmi.org</email>
			<url />
			<organization>HHMI Janelia</organization>
			<organizationUrl>http://janelia.org/</organizationUrl>
			<roles>
				<role>developer</role>
				<role>maintainer</role>
			</roles>
			<timezone>-5</timezone>
		</developer>
		<developer>
			<id>igorpisarev</id>
			<name>Igor Pisarev</name>
			<email>pisarevi@janelia.hhmi.org</email>
			<url />
			<organization>HHMI Janelia</organization>
			<organizationUrl>http://janelia.org/</organizationUrl>
			<roles>
				<role>developer</role>
				<role>maintainer</role>
			</roles>
			<timezone>-5</timezone>
		</developer>
	</developers>

	<contributors>
		<contributor>
			<name>Vanessa Leite</name>
			<properties>
				<id>ssinhaleite</id>
			</properties>
			<url>https://github.com/ssinhaleite</url>
		</contributor>
	</contributors>

	<mailingLists>
		<mailingList>
			<name>ImageJ Forum</name>
			<archive>http://forum.imagej.net/</archive>
		</mailingList>
	</mailingLists>

	<issueManagement>
		<system>GitHub</system>
		<url>https://github.com/saalfeldlab/paintera/issues</url>
	</issueManagement>


	<ciManagement>
		<system>GitHub Actions</system>
		<url>https://github.com/saalfeldlab/paintera/actions</url>
	</ciManagement>

	<scm>
		<connection>scm:git:https://github.com/saalfeldlab/paintera</connection>
		<developerConnection>scm:git:git@github.com:saalfeldlab/paintera.git</developerConnection>
		<tag>HEAD</tag>
		<url>https://github.com/saalfeldlab/paintera</url>
	</scm>

	<repositories>
		<repository>
			<id>scijava.public</id>
			<url>https://maven.scijava.org/content/groups/public</url>
		</repository>
		<repository>
			<id>bintray-jerady-maven</id>
			<url>https://dl.bintray.com/jerady/maven</url>
		</repository>
		<repository>
			<id>jzy3d</id>
			<url>http://maven.jzy3d.org/releases</url>
		</repository>
	</repositories>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<configuration>
						<forkCount>1</forkCount>
						<argLine>-Dtestfx.robot=glass -Dglass.platform=Monocle -Dmonocle.platform=Headless -Dprism.order=sw</argLine>
					</configuration>
				</plugin>
				<plugin>
					<groupId>com.github.akman</groupId>
					<artifactId>jpackage-maven-plugin</artifactId>
					<version>0.1.3</version>
					<configuration>
						<mainclass>org.janelia.saalfeldlab.paintera.Paintera</mainclass>
						<mainjar>${project.artifactId}-${project.version}.jar</mainjar>
						<input>${project.basedir}/target</input>
						<appversion>${project.version}</appversion>
						<icon>${project.basedir}/img/icon-draft.svg</icon>
						<linuxpackagename>paintera</linuxpackagename>
						<linuxappcategory>Utilities</linuxappcategory>
						<linuxmenugroup>Utilities</linuxmenugroup>
						<linuxapprelease>Paintera</linuxapprelease>
						<linuxshortcut>true</linuxshortcut>
						<modulepath>
							<dependencysets>
								<dependencyset>
									<includeoutput>true</includeoutput>
									<excludeautomatic>true</excludeautomatic>
								</dependencyset>
							</dependencysets>
						</modulepath>
						<addmodules>
							<addmodule>javafx.base</addmodule>
							<addmodule>javafx.controls</addmodule>
							<addmodule>javafx.fxml</addmodule>
							<addmodule>javafx.media</addmodule>
							<addmodule>javafx.swing</addmodule>
							<addmodule>javafx.web</addmodule>
							<addmodule>javafx.graphics</addmodule>
							<addmodule>java.naming</addmodule>
							<addmodule>java.management</addmodule>
							<addmodule>java.sql</addmodule>
						</addmodules>
						<!--@formatter:off-->
						<javaoptions>--illegal-access=permit --add-opens=javafx.base/javafx.util=ALL-UNNAMED --add-opens=javafx.base/javafx.event=ALL-UNNAMED --add-opens=javafx.base/javafx.beans.property=ALL-UNNAMED --add-opens=javafx.base/com.sun.javafx.binding=ALL-UNNAMED --add-opens=javafx.base/com.sun.javafx.event=ALL-UNNAMED --add-opens=javafx.graphics/javafx.scene=ALL-UNNAMED --add-opens=javafx.graphics/javafx.stage=ALL-UNNAMED --add-opens=javafx.graphics/javafx.geometry=ALL-UNNAMED --add-opens=javafx.graphics/javafx.animation=ALL-UNNAMED --add-opens=javafx.graphics/javafx.scene.input=ALL-UNNAMED --add-opens=javafx.graphics/javafx.scene.image=ALL-UNNAMED --add-opens=javafx.graphics/com.sun.prism=ALL-UNNAMED --add-opens=javafx.graphics/com.sun.javafx.geom=ALL-UNNAMED --add-opens=javafx.graphics/com.sun.javafx.image=ALL-UNNAMED --add-opens=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED --add-opens=javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED --add-opens=javafx.graphics/com.sun.javafx.perf=ALL-UNNAMED --add-opens=javafx.graphics/com.sun.javafx.cursor=ALL-UNNAMED --add-opens=javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED --add-opens=javafx.graphics/com.sun.javafx.scene.traversal=ALL-UNNAMED --add-opens=javafx.graphics/com.sun.javafx.geom.transform=ALL-UNNAMED --add-opens=javafx.graphics/com.sun.scenario.animation=ALL-UNNAMED --add-opens=javafx.graphics/com.sun.scenario.animation.shared=ALL-UNNAMED --add-opens=javafx.graphics/com.sun.scenario.effect=ALL-UNNAMED --add-opens=javafx.graphics/com.sun.javafx.sg.prism=ALL-UNNAMED --add-opens=javafx.graphics/com.sun.prism.paint=ALL-UNNAMED</javaoptions>
						<!--@formatter:on-->
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.jetbrains.dokka</groupId>
				<artifactId>dokka-maven-plugin</artifactId>
				<version>${dokka.version}</version>
				<executions>
					<execution>
						<phase>pre-site</phase>
						<goals>
							<goal>dokka</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<dokkaPlugins>
						<plugin>
							<groupId>org.jetbrains.dokka</groupId>
							<artifactId>kotlin-as-java-plugin</artifactId>
							<version>${dokka.version}</version>
						</plugin>
					</dokkaPlugins>
					<jdkVersion>11</jdkVersion>
					<sourceLinks>
						<link>
							<path>${project.basedir}/src/main/kotlin</path>
							<url>https://github.com/saalfeldlab/paintera/tree/master/src/main/kotlin</url>
							<lineSuffix>#L</lineSuffix>
						</link>

						<link>
							<path>${project.basedir}/src/main/java</path>
							<url>https://github.com/saalfeldlab/paintera/tree/master/src/main/java</url>
							<lineSuffix>#L</lineSuffix>
						</link>
					</sourceLinks>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.jetbrains.kotlin</groupId>
				<artifactId>kotlin-maven-plugin</artifactId>
				<version>${kotlin.version}</version>
				<executions>
					<execution>
						<id>compile</id>
						<phase>compile</phase>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
					<execution>
						<id>test-compile</id>
						<phase>test-compile</phase>
						<goals>
							<goal>test-compile</goal>
						</goals>
					</execution>
					<execution>
						<id>kapt</id>
						<goals>
							<goal>kapt</goal>
						</goals>
						<configuration>
							<sourceDirs>
								<sourceDir>${project.basedir}/src/main/kotlin</sourceDir>
								<sourceDir>${project.basedir}/src/main/java</sourceDir>
							</sourceDirs>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<jvmTarget>11</jvmTarget>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<executions>
					<!-- Replacing default-compile as it is treated specially by maven -->
					<execution>
						<id>default-compile</id>
						<phase>none</phase>
					</execution>
					<!-- Replacing default-testCompile as it is treated specially by maven -->
					<execution>
						<id>default-testCompile</id>
						<phase>none</phase>
					</execution>
					<execution>
						<id>java-compile</id>
						<phase>compile</phase>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
					<execution>
						<id>java-test-compile</id>
						<phase>test-compile</phase>
						<goals>
							<goal>testCompile</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!--		copy README.md instead of symlink-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${maven-resources-plugin.version}</version>
				<executions>
					<execution>
						<id>copy-readme-md</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>target/classes</outputDirectory>
							<resources>
								<resource>
									<directory>${basedir}</directory>
									<includes>
										<include>README.md</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-img</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>target/classes/img</outputDirectory>
							<resources>
								<resource>
									<directory>img</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!--		NB: generate and copy html directly instead of copying markdown-->
			<plugin>
				<groupId>com.ruleoftech</groupId>
				<artifactId>markdown-page-generator-plugin</artifactId>
				<version>${markdown-page-generator-plugin.version}</version>
				<executions>
					<execution>
						<id>readme-md-to-html</id>
						<phase>validate</phase>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<inputDirectory>markdown</inputDirectory>
					<outputDirectory>${project.build.outputDirectory}</outputDirectory>
					<inputEncoding>UTF-8</inputEncoding>
					<pegdownExtensions>TABLES,FENCED_CODE_BLOCKS,SMARTYPANTS,HARDWRAPS,STRIKETHROUGH,TASKLISTITEMS,AUTOLINKS,ATXHEADERSPACE</pegdownExtensions>
				</configuration>
			</plugin>

			<!--		editorconfig-->
			<plugin>
				<groupId>org.ec4j.maven</groupId>
				<artifactId>editorconfig-maven-plugin</artifactId>
				<version>0.1.1</version>
				<executions>
					<execution>
						<id>check</id>
						<phase>verify</phase>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!-- See http://ec4j.github.io/editorconfig-maven-plugin/ for full configuration reference -->
					<excludes>
						<!-- Note that maven submodule directories and many non-source file patterns are excluded by default -->
						<!-- - see https://github.com/ec4j/editorconfig-maven-plugin/blob/master/ec4j-lint-api/src/main/java/org/ec4j/maven/lint/api/Constants.java#L37 -->
						<!-- You can exclude further files from processing: -->
						<!--						<exclude>src/main/**/*.whatever</exclude>-->
						<exclude>**/ci-build.sh</exclude>
						<exclude>**/ci-setup-github-actions.sh</exclude>
					</excludes>
					<!-- All files are included by default:
					<includes>
						<include>**</include>
					</includes>
					-->
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.github.akman</groupId>
				<artifactId>jpackage-maven-plugin</artifactId>
				<version>0.1.3</version>
			</plugin>

			<plugin>
				<groupId>org.openjfx</groupId>
				<artifactId>javafx-maven-plugin</artifactId>
				<version>0.0.5</version>
				<executions>
					<execution>
						<id>default-cli</id>
						<configuration>
							<mainClass>org.janelia.saalfeldlab.paintera.Paintera</mainClass>
							<options>
								<option>--add-opens=javafx.base/javafx.util=ALL-UNNAMED</option>
								<option>--add-opens=javafx.base/javafx.event=ALL-UNNAMED</option>
								<option>--add-opens=javafx.base/javafx.beans.property=ALL-UNNAMED</option>
								<option>--add-opens=javafx.base/com.sun.javafx.binding=ALL-UNNAMED</option>
								<option>--add-opens=javafx.base/com.sun.javafx.event=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.scene=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.stage=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.geometry=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.animation=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.scene.input=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.scene.image=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.prism=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.geom=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.image=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.perf=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.cursor=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.scene.traversal=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.geom.transform=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.scenario.animation=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.scenario.animation.shared=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.scenario.effect=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.sg.prism=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.prism.paint=ALL-UNNAMED</option>
							</options>
							<commandlineArgs>${paintera.commandline.args}</commandlineArgs>
							<includePathExceptionsInClasspath>true</includePathExceptionsInClasspath>
						</configuration>
					</execution>
					<execution>
						<id>debug</id>
						<configuration>
							<mainClass>org.janelia.saalfeldlab.paintera.Paintera</mainClass>
							<options>
								<option>-Dglass.disableGrab=true</option>
								<option>-agentlib:jdwp=transport=dt_socket,server=n,address=localhost:5005,suspend=y</option>
								<option>--add-opens=javafx.base/javafx.util=ALL-UNNAMED</option>
								<option>--add-opens=javafx.base/javafx.event=ALL-UNNAMED</option>
								<option>--add-opens=javafx.base/javafx.beans.property=ALL-UNNAMED</option>
								<option>--add-opens=javafx.base/com.sun.javafx.binding=ALL-UNNAMED</option>
								<option>--add-opens=javafx.base/com.sun.javafx.event=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.scene=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.stage=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.geometry=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.animation=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.scene.input=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.scene.image=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.prism=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.geom=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.image=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.perf=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.cursor=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.scene.traversal=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.geom.transform=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.scenario.animation=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.scenario.animation.shared=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.scenario.effect=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.sg.prism=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.prism.paint=ALL-UNNAMED</option>
							</options>
							<commandlineArgs>${paintera.commandline.args}</commandlineArgs>
							<includePathExceptionsInClasspath>true</includePathExceptionsInClasspath>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>skip-kapt</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jetbrains.kotlin</groupId>
						<artifactId>kotlin-maven-plugin</artifactId>
						<version>${kotlin.version}</version>
						<executions>
							<execution>
								<id>compile</id>
								<phase>none</phase>
							</execution>
							<execution>
								<id>test-compile</id>
								<phase>none</phase>
							</execution>
							<execution>
								<id>kapt</id>
								<phase>none</phase>
							</execution>
						</executions>
						<configuration>
							<jvmTarget>11</jvmTarget>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
